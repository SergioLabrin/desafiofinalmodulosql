--1 crear el modelo de datos 

CREATE TABLE peliculas (
    id SERIAL PRIMARY KEY,
    titulo VARCHAR(255) NOT NULL
);

CREATE TABLE tags (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL
);

CREATE TABLE peliculas_tags (
    pelicula_id INT REFERENCES peliculas(id) ON DELETE CASCADE,
    tag_id INT REFERENCES tags(id) ON DELETE CASCADE,
    PRIMARY KEY (pelicula_id, tag_id)
);


--2. insertar peliculas  con las asociaciones 

INSERT INTO peliculas (titulo) VALUES
('Pelicula 1'),
('Pelicula 2'),
('Pelicula 3'),
('Pelicula 4'),
('Pelicula 5');

INSERT INTO tags (nombre) VALUES
('Acción'),
('Drama'),
('Comedia'),
('Thriller'),
('Ciencia Ficción');

INSERT INTO peliculas_tags (pelicula_id, tag_id) VALUES
(1, 1),
(1, 2),
(1, 3),
(2, 4),
(2, 5);

--3. contar la vcantidad de tags

SELECT p.titulo, COUNT(pt.tag_id) AS cantidad_tags
FROM peliculas p
LEFT JOIN peliculas_tags pt ON p.id = pt.pelicula_id
GROUP BY p.id;

--4. crear las tablas correspondientes al segundo modelo 

CREATE TABLE usuarios (
    id SERIAL PRIMARY KEY,
    nombre VARCHAR(255) NOT NULL,
    edad INT NOT NULL
);

CREATE TABLE preguntas (
    id SERIAL PRIMARY KEY,
    texto VARCHAR(255) NOT NULL
);

CREATE TABLE respuestas (
    id SERIAL PRIMARY KEY,
    usuario_id INT REFERENCES usuarios(id) ON DELETE CASCADE,
    pregunta_id INT REFERENCES preguntas(id) ON DELETE CASCADE,
    respuesta_texto VARCHAR(255) NOT NULL,
    es_correcta BOOLEAN NOT NULL
);



--5.  insertar 5 ussuarios y 5 preguntas 

-- Insertar usuarios
INSERT INTO usuarios (nombre, edad) VALUES
('Usuario 1', 25),
('Usuario 2', 30),
('Usuario 3', 20),
('Usuario 4', 22),
('Usuario 5', 28);

-- Insertar preguntas
INSERT INTO preguntas (texto) VALUES
('Pregunta 1'),
('Pregunta 2'),
('Pregunta 3'),
('Pregunta 4'),
('Pregunta 5');

-- Insertar respuestas
-- Pregunta 1 con dos respuestas correctas de dos usuarios diferentes
INSERT INTO respuestas (usuario_id, pregunta_id, respuesta_texto, es_correcta) VALUES
(1, 1, 'Respuesta correcta', TRUE),
(2, 1, 'Respuesta correcta', TRUE);

-- Pregunta 2 con una respuesta correcta de un usuario
INSERT INTO respuestas (usuario_id, pregunta_id, respuesta_texto, es_correcta) VALUES
(3, 2, 'Respuesta correcta', TRUE);

-- Las otras tres preguntas con respuestas incorrectas
INSERT INTO respuestas (usuario_id, pregunta_id, respuesta_texto, es_correcta) VALUES
(4, 3, 'Respuesta incorrecta', FALSE),
(5, 4, 'Respuesta incorrecta', FALSE),
(1, 5, 'Respuesta incorrecta', FALSE);

--6. contar la cantidad de respuestas correctas por usuario

SELECT u.nombre, COUNT(r.id) AS respuestas_correctas
FROM usuarios u
LEFT JOIN respuestas r ON u.id = r.usuario_id AND r.es_correcta = TRUE
GROUP BY u.id;

--7. contar cuantos usuarios respondieron correctamente 

SELECT p.texto, COUNT(r.usuario_id) AS usuarios_respondieron_correctamente
FROM preguntas p
LEFT JOIN respuestas r ON p.id = r.pregunta_id AND r.es_correcta = TRUE
GROUP BY p.id;

--8. implementera un borrado en cascada 

-- Borrar el primer usuario
DELETE FROM usuarios WHERE id = 1;


--9. crear restricciones que prohiban usuarios menores a 18 años 

ALTER TABLE usuarios
ADD CONSTRAINT chk_edad CHECK (edad >= 18);


--10 alterar la tabla usuarios agrreegando email con la condicion de que sea unico 

ALTER TABLE usuarios
ADD COLUMN email VARCHAR(255) UNIQUE;
